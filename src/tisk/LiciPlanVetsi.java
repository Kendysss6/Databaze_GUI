package tisk;

import java.io.FileOutputStream;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.util.Date;

import com.itextpdf.text.Anchor;
import com.itextpdf.text.BadElementException;
import com.itextpdf.text.BaseColor;
import com.itextpdf.text.Chapter;
import com.itextpdf.text.Document;
import com.itextpdf.text.DocumentException;
import com.itextpdf.text.Element;
import com.itextpdf.text.Font;
import com.itextpdf.text.List;
import com.itextpdf.text.ListItem;
import com.itextpdf.text.PageSize;
import com.itextpdf.text.Paragraph;
import com.itextpdf.text.Phrase;
import com.itextpdf.text.Section;
import com.itextpdf.text.pdf.PdfPCell;
import com.itextpdf.text.pdf.PdfPTable;
import com.itextpdf.text.pdf.PdfWriter;

public class LiciPlanVetsi {
	 private static String FILE = "E:/databaze-vyborny material/Pdfzkousky/DynTabulka.pdf";
	  private static Font catFont = new Font(Font.FontFamily.TIMES_ROMAN, 18, Font.BOLD);
	  private static Font redFont = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.NORMAL, BaseColor.RED);
	  private static Font subFont = new Font(Font.FontFamily.TIMES_ROMAN, 16, Font.BOLD);
	  private static Font smallBold = new Font(Font.FontFamily.TIMES_ROMAN, 12, Font.BOLD);
	  private ResultSet rs;
	  private ResultSetMetaData metaData;
	  

	  public static void main(String[] args) {
	    try {
	      Document document = new Document(PageSize.A4, 20,20,10,10);
	      PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(FILE));
	      document.open();
	      addMetaData(document);
	      //addTitlePage(document);
	      addContent(document);
	      document.close();
	    } catch (Exception e) {
	      e.printStackTrace();
	    }
	  }
	  
	  public LiciPlanVetsi(ResultSet rs){
		  this.rs = rs;
		  try {
			  this.metaData = rs.getMetaData();
		      Document document = new Document(PageSize.A4, 20,20,10,10);
		      PdfWriter pdfWriter = PdfWriter.getInstance(document, new FileOutputStream(FILE));
		      document.open();
		      addMetaData(document);
		     // addTitlePage(document);
		      addContent(document);
		      document.close();
		    } catch (Exception e) {
		      e.printStackTrace();
		    }
	  }

	  // iText allows to add metadata to the PDF which can be viewed in your Adobe
	  // Reader
	  // under File -> Properties
	  private static void addMetaData(Document document) {
	    document.addTitle("My first PDF");
	    document.addSubject("Using iText");
	    document.addKeywords("Java, PDF, iText");
	    document.addAuthor("Ond\u0159ej Havl\u00ED\u010Dek");
	    document.addCreator("Databáze Slévárny Strašice");
	  }

	  private static void addTitlePage(Document document)
	      throws DocumentException {
	    Paragraph preface = new Paragraph();
	    // We add one empty line
	    addEmptyLine(preface, 1);
	    // Lets write a big header
	    preface.add(new Paragraph("Title of the document", catFont));

	    addEmptyLine(preface, 1);
	    // Will create: Report generated by: _name, _date
	    preface.add(new Paragraph("Report generated by: " + System.getProperty("user.name") + ", " + new Date(), //$NON-NLS-1$ //$NON-NLS-2$ //$NON-NLS-3$
	        smallBold));
	    addEmptyLine(preface, 3);
	    preface.add(new Paragraph("This document describes something which is very important ",
	        smallBold));

	    addEmptyLine(preface, 8);

	    preface.add(new Paragraph("This document is a preliminary version and not subject to your license agreement or any other agreement with vogella.com ;-).",
	        redFont));

	    document.add(preface);
	    // Start a new page
	    document.newPage();
	  }

	  private static void addContent(Document document) throws DocumentException {
	    Anchor anchor = new Anchor("First Chapter", catFont);
	    anchor.setName("First Chapter");

	    // Second parameter is the number of the chapter
	    Chapter catPart = new Chapter(new Paragraph(anchor), 1);

	    Paragraph subPara = new Paragraph("Subcategory 1", subFont);
	    
	    Section subCatPart = catPart.addSection(subPara);
	    subCatPart.add(new Paragraph("Hello"));

	    subPara = new Paragraph("Subcategory 2", subFont);
	    subCatPart = catPart.addSection(subPara);
	    subCatPart.add(new Paragraph("Paragraph 1"));
	    subCatPart.add(new Paragraph("Paragraph 2"));
	    
	    Paragraph pom = new Paragraph("Paragraph 3");
	    subCatPart.add(pom);
	   
	    //addEmptyLine(pom, 2);
	    
	    // add a table
	    createTable(subCatPart);

	    // now add all this to the document
	    document.add(catPart);

	  }

	  private static void createTable(Section subCatPart) throws BadElementException {
		Paragraph pom = new Paragraph("Tabulka 1");		
		PdfPTable table = new PdfPTable(2);
		table.setWidthPercentage(100);
		

		// t.setBorderColor(BaseColor.GRAY);
		// t.setPadding(4);
		// t.setSpacing(4);
		// t.setBorderWidth(1);

		PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
		c1.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 2"));
		c1.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(c1);

		c1 = new PdfPCell(new Phrase("Table Header 3"));
		c1.setHorizontalAlignment(Element.ALIGN_LEFT);
		table.addCell(c1);
		table.setHeaderRows(1);

		for(int i = 0; i < 100; i++){
			table.addCell(""+i);
		}
		table.addCell("1.0");
		table.addCell("1.1");
		table.addCell("1.2");
		table.addCell("2.1");
		table.addCell("2.2");
		table.addCell("2.3");
		table.addCell("2.4");
		table.addCell("2.5");
		table.addCell("2.6");
		table.addCell("2.7sdasdasda");
		table.addCell("2.6");
		table.addCell("2.6");
		table.addCell("2.6");

		table.addCell("Konec tabulky");

		pom.add(table);
		subCatPart.add(pom);

	  }
	  
	  private void createTableResultSet(Section subCatPart) throws BadElementException, SQLException {
			Paragraph pom = new Paragraph("Tabulka 1");	
			int colCount = this.metaData.getColumnCount();
			PdfPTable table = new PdfPTable(colCount);
			table.setWidthPercentage(100);
			
			 String [] headers = new String[colCount];
		      for (int h = 1; h <= colCount; h++) {
		    	  headers[h -1] = metaData.getColumnName(h);
		      }
			
			// t.setBorderColor(BaseColor.GRAY);
			// t.setPadding(4);
			// t.setSpacing(4);
			// t.setBorderWidth(1);
			
			
			PdfPCell c1 = new PdfPCell(new Phrase("Table Header 1"));
			c1.setHorizontalAlignment(Element.ALIGN_LEFT);
			table.addCell(c1);

			c1 = new PdfPCell(new Phrase("Table Header 2"));
			c1.setHorizontalAlignment(Element.ALIGN_LEFT);
			table.addCell(c1);

			c1 = new PdfPCell(new Phrase("Table Header 3"));
			c1.setHorizontalAlignment(Element.ALIGN_LEFT);
			table.addCell(c1);
			table.setHeaderRows(2);

			for(int i = 0; i < 100; i++){
				table.addCell(""+i);
			}
			table.addCell("1.0");
			table.addCell("1.1");
			table.addCell("1.2");
			table.addCell("2.1");
			table.addCell("2.2");
			table.addCell("2.3");
			table.addCell("2.4");
			table.addCell("2.5");
			table.addCell("2.6");
			table.addCell("2.7sdasdasda");
			table.addCell("2.6");
			table.addCell("2.6");
			table.addCell("2.6");

			table.addCell("Konec tabulky");

			pom.add(table);
			subCatPart.add(pom);

		  }

	  private static void addEmptyLine(Paragraph paragraph, int number) {
	    for (int i = 0; i < number; i++) {
	      paragraph.add(new Paragraph(" "));
	    }
	  }
}
